// Code generated for package assets by go-bindata DO NOT EDIT. (@generated)
// sources:
// html/app.html
// js/app.js
// css/app.css
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlAppHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x51\x6e\x83\x30\x0c\xfd\xdf\x29\xbc\x5c\x20\x17\x70\x91\xf6\xb9\xef\x1d\x00\x85\xc4\x2d\x99\xd2\x80\x6a\x53\x89\xdb\x4f\x21\xc0\x0a\xeb\x22\xfa\x13\x07\xdb\xef\xf1\x9e\x93\xe0\xbb\xeb\xac\x8c\x3d\x41\x2b\xd7\x50\xbd\x61\x0e\x00\xd8\x92\x71\x15\xea\x29\xa4\xef\xa6\x73\x63\xda\x00\xa0\xf3\x77\xf0\xee\xa4\xbe\xf9\xa3\xef\x55\x4e\xee\xd3\x75\x7d\xa5\x38\xac\xc5\x44\x30\x88\x74\x71\xdf\x51\xd7\x3e\x7a\x51\x55\x5a\x51\xe7\x9e\x03\x20\x1e\xa3\x55\x55\x5a\xf7\x20\xd4\xce\xdf\xff\xd3\x24\xa6\xe1\xb2\x26\x31\xcd\x67\x3c\x77\x0a\x6c\x30\xcc\x27\xc5\x14\xc8\x0a\xb9\xa4\xf0\xdc\x1d\x52\x28\xa6\xf9\x22\x73\xb3\xad\xaa\x78\x8a\xc7\x51\x22\x3e\x5e\x38\xe1\xf2\xae\x6c\x8e\xc9\x8a\xdf\xb2\xcc\xa9\xa2\x85\xb9\xe7\x00\xcd\x62\xe3\x57\xf7\x6e\x9e\x9b\xbe\xe4\xe1\xb2\x19\xef\xa3\x5a\x00\x0c\xa6\xa1\x50\x80\x4f\xf5\x07\x3c\x00\xfa\xd8\x0f\x52\x80\x4c\x75\x05\x7a\x03\xfa\x3b\xdc\x1d\x2a\x37\x14\x8e\x47\x4f\x52\x0e\xfb\xbe\x11\x0f\x41\x78\x23\x7d\xce\x3d\x1f\xc6\x6b\x87\xb0\xdc\x8a\x95\x6b\xb9\x1e\xcf\xd9\xd6\x3f\xa1\xce\x8f\x16\x75\x7e\xd5\x3f\x01\x00\x00\xff\xff\xc2\x7f\x00\xf1\xed\x03\x00\x00")

func htmlAppHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlAppHtml,
		"html/app.html",
	)
}

func htmlAppHtml() (*asset, error) {
	bytes, err := htmlAppHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/app.html", size: 1005, mode: os.FileMode(436), modTime: time.Unix(1575891371, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsAppJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4d\x6f\xe2\x48\x10\xbd\xfb\x57\xd4\xad\x8d\x40\x9e\xcd\xee\x8d\x59\x0e\x93\x4c\x0e\xac\x86\x19\x69\xc9\x2d\x42\x56\xe3\x2e\x9c\xde\x34\x6d\xd6\x5d\x4e\x82\x08\xff\x7d\x55\x6d\x1b\xda\x7c\x25\x1c\xd6\x52\x94\x56\x7d\xbc\x7a\xf5\x5c\x5d\xe6\x55\x5b\x55\xbc\x26\xff\xb8\x6f\xab\x15\x8c\x60\x13\x01\x90\x26\x83\x43\x10\x54\x22\xba\xa2\x2a\x33\x14\x83\x08\x00\xcd\x10\x6c\x65\x0c\x9f\xb3\x62\xb9\x94\x56\x8d\xad\xc2\xb7\x21\xdc\xb0\x69\x85\x56\x69\x9b\xdf\x49\x63\xe6\x32\x7b\x76\x43\xd8\x6c\x07\xd1\x36\x8a\x3c\x74\xf2\x24\xad\x32\x78\xff\x82\x96\x60\x04\x8b\xca\x66\xa4\x0b\x1b\x5b\xb9\xc4\x01\xac\xe4\xda\x14\x52\xf5\x7c\x79\xbd\x80\xb8\x31\x24\x77\x41\x9d\xda\xcb\x0f\x47\xd4\xa8\x87\x45\x1f\x4f\x25\xce\xf6\x99\xfc\x5c\x93\xd9\x12\xe9\x05\xf9\x0a\x0d\x12\x5e\x05\xd3\x64\x6f\x23\xfe\xdb\x49\x22\xb3\x7f\x2b\x5d\x62\x18\x19\x4a\xd3\xb2\x2e\x91\xaa\xd2\x36\xf5\x42\xe1\xfb\xfd\x3d\x96\x43\xab\x26\xe8\x9c\xcc\x31\xc4\x40\xd6\xfb\xa7\xd7\xd8\x1f\xbf\x4b\x92\xcd\xb1\xa5\x5c\x97\xd9\x79\x93\x03\x3a\x67\xa9\xc6\xac\xc9\x19\x11\x4e\xa3\xcd\x60\xd4\x2d\x1d\x01\xc8\xee\x68\x9c\x24\xdc\x0b\xdb\xa4\x6a\x35\x41\x5b\x1d\x0b\xa5\x8a\xac\x5a\xa2\xa5\x24\x47\xba\x37\xc8\xc7\xdb\xf5\x58\xc5\xc2\x67\xa6\xe9\x12\x6d\x95\xa6\xda\x6a\x12\xbd\xa4\xb0\x99\xd1\xd9\x73\x47\xaa\x56\xef\x23\x41\x63\xe1\xb3\x06\xb0\x21\x74\x34\x84\x9b\xdf\xff\xd8\x0e\xf6\x89\x8a\x29\x06\x13\x26\x0d\x96\x14\xff\x35\xfd\xf5\x33\x71\x54\x6a\x9b\xeb\xc5\xba\x0e\xaa\xa7\x68\xdb\x8b\xea\x51\xf8\x1c\x63\xb7\xb6\xd9\xf5\x8c\x7d\xd6\x00\x36\x7f\x23\x9f\x86\x40\x65\x85\xe7\x49\x7f\x92\x72\xf7\x35\x3c\xc8\xb9\x3b\x7e\x0d\x06\x09\xa8\xf6\x7c\xd4\x1f\x87\x89\x5e\xe0\x75\xb7\xeb\x07\x99\xf3\xdb\x8f\xc5\xbc\x22\x2a\xac\xe0\xc2\x8b\xa2\x84\x98\x71\x35\x8c\xe0\xb7\xaf\xa0\xe1\x4f\x5f\x22\x31\x68\x73\x7a\xfa\x0a\xba\xdf\x6f\x7b\x61\xfb\xa3\x9e\x5d\x94\xeb\x7f\x21\xc9\xcf\x35\x44\xdb\x3d\xd6\x12\xce\x8c\x74\x8e\x51\x61\x34\x02\xe1\xd0\x60\x46\xa8\x44\x77\x75\x9d\x08\x06\x21\x76\x01\xdb\xa8\xfb\x9f\xa9\x38\xf4\xdd\x9f\x69\x35\x6c\xa6\x89\xbc\xd8\x4d\x8b\x76\xae\xa3\xd6\x7f\x81\x24\x37\x1d\x86\x69\x95\xb8\x95\xd1\x14\x8b\x34\xdd\x51\x78\xbc\x99\xb1\x0e\x98\x90\x2c\x73\xa4\x4e\x10\xc9\xb9\x0f\xe8\x4a\x73\xb6\xf2\x4e\xca\xb3\x32\xed\xaa\x5c\xc8\xdb\x9e\xb8\x00\x53\x94\x65\xf6\x74\xfa\x0a\x38\xef\xbb\xf5\xf3\xf1\x89\x29\x6b\xd8\xd7\x88\x69\x1a\xcc\xd5\x1e\x6c\x6c\x57\x15\x5d\x8f\xa5\x39\xcd\x43\x85\x9c\x2e\x5e\x90\xc3\xa5\x2c\xea\x4c\xde\x27\x35\xea\xd4\x2f\x89\x61\x48\x2c\x79\x91\xa6\xc2\xc3\x45\xc1\x8b\xf3\x58\xa0\xda\x87\xe6\xc3\x66\xc4\xfe\x1b\xb3\xdb\xfc\xf1\x81\x8d\xd7\xd0\xa1\xad\x66\x19\xfb\x0f\x07\xcf\xdb\x97\x1f\xda\x56\x6f\xef\x93\xe9\xf8\xfe\xfd\xa1\xd4\x0a\x2d\x7d\x49\x78\x99\xc7\xcd\xcf\x1f\x2b\x5f\x74\x2e\xa9\x28\x93\xca\x61\xf9\x2d\x47\x4b\xbd\x90\x2b\xf7\xc1\x70\x80\xc6\xa1\xb7\x37\x89\x52\x29\xaf\xd1\x0f\xed\x08\x2d\x96\xb1\xf8\xfe\x6b\x72\x57\x58\x62\x5b\x21\x15\x2a\x31\x08\x30\x98\xd1\x7f\x01\x00\x00\xff\xff\x56\xf3\x6f\xc6\x72\x09\x00\x00")

func jsAppJsBytes() ([]byte, error) {
	return bindataRead(
		_jsAppJs,
		"js/app.js",
	)
}

func jsAppJs() (*asset, error) {
	bytes, err := jsAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/app.js", size: 2418, mode: os.FileMode(436), modTime: time.Unix(1575955618, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cssAppCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x41\x8f\x9b\x3c\x10\xbd\xf3\x2b\x46\x8a\xbe\xcb\xa7\x10\x91\x34\xab\x4a\x5e\x69\xa5\xbd\xf5\xde\x1f\x10\x19\x3c\xc0\x6c\x8d\x8d\xec\x71\x42\x5a\xf5\xbf\x57\x36\x74\x97\x90\xd0\xaa\x07\x0e\x36\x33\xef\xbd\x79\xf3\xfc\x3f\xfc\xc8\x00\x4a\x3b\xe4\x9e\xbe\x93\x69\x04\x94\xd6\x29\x74\x79\x69\x87\xe7\xec\x67\x96\x95\x56\x5d\xc7\x1a\x59\x7d\x6b\x9c\x0d\x46\x09\xd8\x14\xc5\xfe\x39\x03\xa8\xac\xb6\x4e\xc0\xa6\xae\x31\x1e\x3b\xe9\x1a\x32\x02\x8a\x78\xe8\xa5\x52\x09\x30\x9d\x6a\x6b\x38\x52\xa0\x80\xe3\xf9\x12\x6f\x14\xf9\x5e\xcb\xab\x80\x5a\xe3\xf0\x5e\x52\xcb\x8e\xf4\x55\xc0\xab\x23\xa9\xb7\xf0\x05\xf5\x19\x99\x2a\xb9\x05\x2f\x8d\xcf\x3d\x3a\xaa\x93\xae\xcd\x9b\x7f\xed\xfb\xa4\xec\x1e\x49\xe3\x90\x2b\x72\x58\x31\x59\x23\xa2\xcc\xd0\x99\xa4\x90\x4c\xde\x22\x35\x2d\x0b\xd8\x17\xc5\xb9\x8d\x97\x17\x52\xdc\xa6\xf3\x7f\x0b\xa9\x7b\xec\x46\x13\x02\xb3\x35\x5b\x20\xd3\x07\x4e\x9c\xa9\xe8\x32\x21\x95\x56\xab\x45\xe7\xee\xf3\x53\xec\x4d\xde\x46\x3f\x27\x1b\x7e\x3b\xb4\x3b\xa4\xdf\x33\x97\xde\x6f\x26\xff\x9d\x54\x14\xbc\x80\x43\x3f\xcc\x24\x24\xee\x2a\x38\x1f\x6d\xef\x2d\x19\x46\x37\xb3\xe3\x74\x62\x59\xfa\xc7\xa6\x48\x4d\x8d\xc9\x89\xb1\xf3\x02\x2a\x1c\x3b\x01\xde\x82\x67\xaa\xaf\x79\x65\x0d\xa3\xe1\xf9\xaf\x9b\x8d\x1f\x0e\x9f\x22\xd1\x0d\xcf\x0b\xcc\x54\x25\xd3\x1b\x67\x2f\x02\xf6\x1f\xa3\xe6\xa5\x65\xb6\xdd\x34\xfe\x22\x2f\x8f\x22\x75\x3f\x7e\xfa\x8a\x08\xb0\x42\xbf\xf3\xa8\xb1\x62\x54\xa3\x3b\x7f\xe0\x38\x1e\x9f\xe6\xe1\x79\x01\x3f\x46\xe4\xd6\x31\x63\x0d\xfe\x4d\x6d\x42\xba\x1f\x7a\xb9\xce\x07\x5c\xb7\x6a\x17\x6b\x9a\x6d\x72\x2a\xff\x8a\xd2\x55\xed\xbf\xe5\x7c\x0d\xe5\x74\xd2\xb2\x44\xfd\x98\x78\xa5\xe3\x23\xf2\xd3\x33\x91\x81\xed\xfd\xe8\xeb\x94\x0e\x7d\xd0\xbc\x12\xca\xf5\x97\xba\x80\xff\x15\x00\x00\xff\xff\xdc\xf9\x48\x7d\xa8\x04\x00\x00")

func cssAppCssBytes() ([]byte, error) {
	return bindataRead(
		_cssAppCss,
		"css/app.css",
	)
}

func cssAppCss() (*asset, error) {
	bytes, err := cssAppCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "css/app.css", size: 1192, mode: os.FileMode(436), modTime: time.Unix(1573108847, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/app.html": htmlAppHtml,
	"js/app.js":     jsAppJs,
	"css/app.css":   cssAppCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"css": &bintree{nil, map[string]*bintree{
		"app.css": &bintree{cssAppCss, map[string]*bintree{}},
	}},
	"html": &bintree{nil, map[string]*bintree{
		"app.html": &bintree{htmlAppHtml, map[string]*bintree{}},
	}},
	"js": &bintree{nil, map[string]*bintree{
		"app.js": &bintree{jsAppJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
